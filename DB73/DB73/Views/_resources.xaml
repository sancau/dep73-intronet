<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:DB73.ViewModels"
                    xmlns:vw="clr-namespace:DB73.Views"
                    xmlns:av="clr-namespace:DB73.AdditionalViewModels"
                    xmlns:h="clr-namespace:DB73.Helpers"
                    >
    <!-- WORKSPACES DATA BINDINGS -->   
    <DataTemplate DataType="{x:Type vm:BugTicketsViewModel}">
        <vw:BugTicketsView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:UserOptionsViewModel}">
        <vw:UserOptionsView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:AboutViewModel}">
        <vw:AboutView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:AdminToolsViewModel}">
        <vw:AdminToolsView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:DocumentsViewModel}">
        <vw:DocumentsView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:MessagesViewModel}">
        <vw:MessagesView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:InventoryViewModel}">
        <vw:InventoryView />
    </DataTemplate>
    

    <!--Boolean Visibility Converter-->

    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    
    <!-- TreeNode to image converter -->
    
    <h:TreeNodeToImageConverter x:Key="TreeNode"/>

    <!-- GENERAL COLOR CONFIG -->

    <SolidColorBrush x:Key="BorderRectangleBrush" Color="Transparent" />
    <SolidColorBrush x:Key="TrasparentWindowBorderBrush" Color="Transparent" />
    <SolidColorBrush x:Key="WindowControlsBrush" Color="#FF2D2D30"/>
    <SolidColorBrush x:Key="MouseOverWindowControlsBrush" Color="#72CA5100" />
    <SolidColorBrush x:Key="PrimaryTitleBrush" Color="#FFCA5100" />
    <SolidColorBrush x:Key="ContentFontBrush" Color="Black" />
    <SolidColorBrush x:Key="ContentFontBrightBrush" Color="Black" />
    <SolidColorBrush x:Key="TextBoxBackgroundBrush" Color="#33666666" />
    <SolidColorBrush x:Key="DataGridBackgroundBrush" Color="Transparent" />
    <SolidColorBrush x:Key="HeaderMenuBackgroundBrush" Color="#11191818" />
    <SolidColorBrush x:Key="HeaderMenuItemBrush" Color="#CCCA5100" />

    <SolidColorBrush x:Key="ActiveElementBackgroundBrush" Color="#333333aa" />
    <SolidColorBrush x:Key="InactiveElementBackgroundBrush" Color="#11333366" />

    
    <!--Main window top buttons-->

    <Style x:Key="MainWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Background" Value="LightBlue" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Foreground" Value="DarkSlateGray" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Margin" Value="5,5,5,0" />
    </Style>
    
    <!-- GENERAL BUTTON STYLE -->

    <Style x:Key="BaseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,20,5,0" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="auto" />
    </Style>

    <!-- CUSTOM CONTROLS BUTTON STYLES -->

    <Style x:Key="LittleButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,5,5,5" />
        <Setter Property="Padding" Value="5,0,5,2" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="auto" />
    </Style>

    <Style x:Key="XButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,5,0,5" />
        <Setter Property="Padding" Value="5,0,5,2" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Width" Value="auto" />
    </Style>

    <!-- LISTBOX TO NOT LOST SELECTION ON LOST FOCUS -->
    <Style TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border" Padding="2" SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--GENERAL TEXTBOX / DATEPICKER STYLES AND TRIGGERS-->

    <Style x:Key="GeneralTextBoxStyle" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconOnlyDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="Height" Value="25" />
        <Setter Property="Width" Value="30" />
        <Setter Property="BorderBrush" Value="Transparent" />
    </Style>

    <!-- DATA VALIDATION TEMPLATE

    Error Template to change the default behaviour-->

    <ControlTemplate x:Key="ErrorTemplate">
        <DockPanel LastChildFill="True">
            <Border BorderBrush="Red" BorderThickness="1">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <!-- To display tooltip with the error -->

    <Style TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- This style configures both of the main content areas in the main window. -->

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="IsTabStop" Value="False" />

        <Setter Property="Template">
            <Setter.Value>

                <!-- 
                This template ensures that content of a HeaderedContentControl 
                fills the available vertical space. 
                -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel OpacityMask="#BF000000">
                        <ContentPresenter 
                              DockPanel.Dock="Top"
                              ContentSource="Header" 
                              ContentTemplate="{TemplateBinding HeaderTemplate}" 
                         />
                        <ContentPresenter 
                              ContentSource="Content" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              >
                        </ContentPresenter>
                    </DockPanel>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!-- This template explains how to render a tab item with a close button.-->

    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="165" Background="Transparent">
            <Button 
            Command="{Binding Path=CloseCommand}"
            Content="X"
            Cursor="Hand"
            DockPanel.Dock="Right"
            Focusable="False"
            FontFamily="Courier" 
            FontSize="10"
            
            Foreground="{StaticResource ContentFontBrightBrush}"    
            Margin="0,1,0,0"
            Padding="0,0,0,1"
            VerticalContentAlignment="Bottom"
            Width="20" Height="20" Background="LightGray"
            />

            <ContentPresenter 
            Content="{Binding Path=WorkspaceTitle}" 
            VerticalAlignment="Center" 
            HorizontalAlignment="Left"
            />
        </DockPanel>
    </DataTemplate>

    <!--TAB ITEM STYLE-->

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Margin="0,0,2,0" Background="{StaticResource BorderRectangleBrush}"
                            BorderBrush="#FF4668C5" BorderThickness="0,0,0,0" CornerRadius="0,5,0,5">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              ContentSource="Header" Margin="5,2,5,2"
                              RecognizesAccessKey="True">
                                <ContentPresenter.LayoutTransform>
                                    <RotateTransform Angle="0" />
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ActiveElementBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,0" />

                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource InactiveElementBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,0" />

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ActiveElementBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,0" />

                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This template explains how to render the 'Workspace' 
        content area in the main window.-->

    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
          IsSynchronizedWithCurrentItem="True" 
          ItemsSource="{Binding}" 
          ItemTemplate="{StaticResource ClosableTabItemTemplate}"
          Margin="5, 15, 5, 5"
          BorderThickness="0,1,1,1"
          BorderBrush="#831A365D"
          Foreground="{StaticResource ContentFontBrightBrush}">

            <TabControl.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Transparent" Offset="0"/>
                    <GradientStop Color="#111A365D" Offset="1"/>
                    <GradientStop Color="#111A365D" Offset="1"/>
                </LinearGradientBrush>
            </TabControl.Background>

        </TabControl>
    </DataTemplate>

    <!-- Window controls template -->

    <Style x:Key="MouseOverContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid Background="{TemplateBinding Background}" x:Name="dgColumnHeader">
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="0,0,0,0" Grid.ColumnSpan="1">
                            <Rectangle x:Name="PART_Rectangle" Width="25" Height="25" Margin="0" HorizontalAlignment="Center" RadiusX="2" RadiusY="2">
                                <Rectangle.Style>
                                    <Style TargetType="{x:Type Rectangle}">
                                        <Setter Property="Fill" Value="{DynamicResource WindowControlsBrush}"></Setter>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                        </Border>
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center"  VerticalAlignment="Center" Content="{TemplateBinding Content}" >
                            <ContentPresenter.OpacityMask>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="Black" Offset="0"/>
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                            </ContentPresenter.OpacityMask>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Rectangle" Property="Fill" Value="{DynamicResource MouseOverWindowControlsBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeNodeView -->

    <Style x:Key="SearchableTreeView" TargetType="{x:Type TreeView}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFE0F0FF" Offset="0"/>
                <GradientStop Color="#FFABE0FF" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEEEEEE" Offset="0"/>
                <GradientStop Color="#FFDDDDDD" Offset="1"/>
            </LinearGradientBrush>
        </Style.Resources>

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                    <Setter Property="BorderThickness" Value="1.5"/>
                    <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
                    <Setter Property="Visibility" Value="{Binding Path=IsMatch, Mode=OneWay, Converter={StaticResource ResourceKey=BoolToVis}}"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="#FFABC0F0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="LightGray"/>
                        </MultiTrigger>
                    </Style.Triggers>
                    <Style.Resources>
                        <Style TargetType="Border">
                            <Setter Property="CornerRadius" Value="3"/>
                        </Style>
                    </Style.Resources>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <HierarchicalDataTemplate DataType="{x:Type av:TreeNodeViewModel}" ItemsSource="{Binding Path=Children, Mode=OneWay}">
                    <StackPanel Orientation="Horizontal" Margin="2 0 4 0">
                        <Image Width="24" Height="24" Margin="0 0 4 0" Source="{Binding Converter={StaticResource ResourceKey=TreeNode}}"/>

                        <TextBlock Text="{Binding Path=Name, Mode=OneWay}" Margin="0 2 0 0" FontSize="13">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsFolder}"
                                 Value="True">
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                    </StackPanel>
                </HierarchicalDataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>